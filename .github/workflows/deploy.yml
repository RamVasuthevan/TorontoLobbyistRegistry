name: Deploy to Vercel

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install
      
    - name: Build database
      run: |
        pipenv run python main.py

    - name: Deploy to Vercel
      id: deploy
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          OUTPUT=$(pipenv run bash deploy.sh)
        else
          OUTPUT=$(pipenv run bash deploy.sh --no-prod)
        fi
        echo "deploy_output<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Find Pull Request
      uses: jwalton/gh-find-current-pr@v1
      id: findPr
      if: github.event_name == 'push'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Comment on Commit and PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `${{ steps.deploy.outputs.deploy_output }}`;
          const message = `Deployed to Vercel ðŸš€\n\nOutput:\n\`\`\`\n${output}\n\`\`\``;
          
          // Always comment on the commit
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: message
          });
          
          // If this is a PR or a push to a branch with an open PR, comment on the PR
          if (context.eventName === 'pull_request' || ${{ steps.findPr.outputs.number }}) {
            const prNumber = context.eventName === 'pull_request' 
              ? context.issue.number 
              : ${{ steps.findPr.outputs.number }};
            
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }